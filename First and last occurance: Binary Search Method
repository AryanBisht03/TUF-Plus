class Solution {
    public int firstappear(int arr[], int target) {
        int n = arr.length;
        int low = 0, high = n - 1;
        int ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == target) {
                ans = mid;       // store answer
                high = mid - 1;  // keep looking left
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return ans;
    }

    public int lastapp(int arr[], int target) {
        int n = arr.length;
        int low = 0, high = n - 1;
        int ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == target) {
                ans = mid;      // store answer
                low = mid + 1;  // keep looking right
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return ans;
    }

    public int[] searchRange(int[] arr, int target) {
        int firstapp = firstappear(arr, target);
        int lasta = lastapp(arr, target);
        return new int[] {firstapp, lasta};
    }
}
